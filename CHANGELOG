v0.2.2 : 
  * Changes the version to 0.2.2 in TopMakefile.in ( closes: #33 )
  * Stop removing Makefile in distclean target ( closes: #31 )
  * Change --enable-docdir --enable-builddir to --withXX ( closes: #32 )
  * Configure now test that ocamlfind is not detected and that we want to
    use ocamlfind ( closes: #34 )
  * Correct error concerning parsing of "" as a current dir ( closes : #40 )
  * Correct error concerning the test Has_extension ( closes : #41 )
  * Use a new CurrenDir of (Long|Short) to denote the difference between "" and "."
  * Implement readlink
  * Implement pwd ( closes : #39 )
  * Implement cmp ( closes : #37, #38 )
  * Implement new test : Has_no_extension | Basename_is | Dirname_is

v0.2.1 :
  * Minor bug fixes to correct website aspect

v0.2 :
  * Use module/functor to abstract a lot of operation.
  * Generate a decent ocamldoc documentation
  * Abstract regexp matching using functor
  * Separate the sysPath modules in two : Abstract and not. Abstract
    permits to parse once and for all the filename, and then operate
    on it. It allows to handle fast all operation. Concrete module 
    are only proxy that do the conversion to/from the Abstract 
    implementation.
  * Introduce relation ( updir, subdir, compare ) to allow manipulating
    filename in classical structure ( Set, Map... )
  * Rename sysPath, sysUtil to filePath, fileUtil since it appears that it is 
    more consistent regarding the name of the library ( i was not convinced, that 
    sysPath represents anything ).

v0.1.1 ( devel ) :

  * Fix some weird comportement with reduce ( especially
    when trying to reduce filename which try to .. a root )
    and add the possibility to reduce relative filename
  * Rework on the way everything is made :
    * Support 4 different scheme of filename ( Unix ( the 
      native way ), MacOS, Win32, Cygwin )
    * Each scheme use a parser/lexer to decompose his 
      filename and a .ml to handle the whole discriminant 
      element of a specific scheme ( ie the way filename are
      decomposed and the way path like variable are decomposed )
    * All the operation are defined relatively to the 
      discriminant operation in a functorized module 
    * Each scheme produces a module from his discriminant element
      and from the generic operation. These modules are defined in
      SysPath.{UnixPath|Win32Path|CygwinPath|MacOSPath}.
    * Depending on the current environement one of the module above
      is the default binding for all the operation.
  * Add SysUtil which try to create some portable file operation :
    mv, cp, touch, mkdir, test, find. This module abandon any non
    cross platform operation and will never support it ( ie links for 
    example, won't be supported ).
  * This release is an alpha release. 0.2 will be the stable one.

 -- Sylvain LE GALL <sylvain.le-gall@polytechnique.org>  Thu, 30 Jan 2004 00:29:00 +0200


